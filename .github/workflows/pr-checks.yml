name: Pull Request Checks

on:
  pull_request:
    branches: [main, develop]
    types: [opened, synchronize, reopened, ready_for_review]

env:
  NODE_VERSION: '18'
  PYTHON_VERSION: '3.11'

jobs:
  # Required status checks that must pass before merge
  backend-tests:
    name: Backend Tests
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.11, 3.12]

    services:
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install dependencies
      working-directory: ./backend
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install ruff black bandit

    - name: Lint with ruff
      working-directory: ./backend
      run: |
        ruff check . --output-format=github

    - name: Format check with black
      working-directory: ./backend
      run: |
        black --check .

    - name: Security check with bandit
      working-directory: ./backend
      run: |
        bandit -r . -f json -o bandit-report.json || true

    - name: Run unit tests with pytest
      working-directory: ./backend
      env:
        REDIS_URL: redis://localhost:6379
        API_MODE: demo
        DEFAULT_MODEL: gpt-4o-mini
        MAX_INPUT_CHARACTERS: 100000
        MAX_TOKENS_PER_JOB: 50000
        DAILY_JOB_LIMIT: 10
      run: |
        pytest --cov=. --cov-report=xml --cov-report=html --junitxml=pytest-report.xml -v

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./backend/coverage.xml
        flags: backend
        name: backend-coverage
        fail_ci_if_error: false

    - name: Upload test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: backend-test-results-${{ matrix.python-version }}
        path: |
          backend/pytest-report.xml
          backend/htmlcov/
          backend/bandit-report.json

  frontend-tests:
    name: Frontend Tests
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json

    - name: Install dependencies
      working-directory: ./frontend
      run: npm ci

    - name: Lint with ESLint
      working-directory: ./frontend
      run: npm run lint

    - name: Format check with Prettier
      working-directory: ./frontend
      run: npm run format:check

    - name: Run unit tests with Vitest
      working-directory: ./frontend
      run: npm run test:run -- --coverage

    - name: Upload frontend test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: frontend-test-results
        path: |
          frontend/coverage/
          frontend/test-results/
        allow-no-files-found: true

  e2e-tests:
    name: E2E Tests
    runs-on: ubuntu-latest
    needs: [backend-tests, frontend-tests]

    services:
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json

    - name: Install Python dependencies
      working-directory: ./backend
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Install Node.js dependencies
      working-directory: ./frontend
      run: npm ci

    - name: Install Playwright browsers
      working-directory: ./frontend
      run: npx playwright install --with-deps

    - name: Start backend server
      working-directory: ./backend
      env:
        REDIS_URL: redis://localhost:6379
        API_MODE: demo
        DEFAULT_MODEL: gpt-4o-mini
        MAX_INPUT_CHARACTERS: 100000
        MAX_TOKENS_PER_JOB: 50000
        DAILY_JOB_LIMIT: 10
      run: |
        uvicorn main:app --host 0.0.0.0 --port 8000 &
        sleep 10

    - name: Build frontend
      working-directory: ./frontend
      run: npm run build

    - name: Start frontend server
      working-directory: ./frontend
      run: |
        npm run preview -- --port 5173 --host 0.0.0.0 &
        sleep 5

    - name: Run Playwright tests
      working-directory: ./frontend
      env:
        PLAYWRIGHT_BASE_URL: http://localhost:5173
      run: npx playwright test

    - name: Upload Playwright report
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: playwright-report
        path: frontend/playwright-report/
        retention-days: 30

    - name: Upload Playwright test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: playwright-test-results
        path: frontend/test-results/
        retention-days: 30

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install dependencies
      working-directory: ./backend
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install bandit

    - name: Run security scan with bandit
      working-directory: ./backend
      run: |
        bandit -r . -f json -o bandit-report.json

    - name: Upload security report
      uses: actions/upload-artifact@v3
      with:
        name: security-report
        path: backend/bandit-report.json

  build-verification:
    name: Build Verification
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json

    - name: Install Python dependencies
      working-directory: ./backend
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Install Node.js dependencies
      working-directory: ./frontend
      run: npm ci

    - name: Build frontend
      working-directory: ./frontend
      run: npm run build
      env:
        VITE_API_BASE_URL: http://localhost:8000

    - name: Test API startup
      working-directory: ./backend
      run: |
        python -c "import main; print('API imports successfully')"

  # Summary job that all other jobs depend on
  pr-checks-summary:
    name: PR Checks Summary
    runs-on: ubuntu-latest
    needs: [backend-tests, frontend-tests, e2e-tests, security-scan, build-verification]
    if: always()

    steps:
    - name: Check all required checks
      run: |
        echo "Backend tests: ${{ needs.backend-tests.result }}"
        echo "Frontend tests: ${{ needs.frontend-tests.result }}"
        echo "E2E tests: ${{ needs.e2e-tests.result }}"
        echo "Security scan: ${{ needs.security-scan.result }}"
        echo "Build verification: ${{ needs.build-verification.result }}"

        if [[ "${{ needs.backend-tests.result }}" != "success" ||
              "${{ needs.frontend-tests.result }}" != "success" ||
              "${{ needs.e2e-tests.result }}" != "success" ||
              "${{ needs.security-scan.result }}" != "success" ||
              "${{ needs.build-verification.result }}" != "success" ]]; then
          echo "❌ Some required checks failed!"
          echo "This PR cannot be merged until all checks pass."
          exit 1
        else
          echo "✅ All required checks passed!"
          echo "This PR is ready for code review and merge."
        fi

    - name: Comment on PR
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v6
      with:
        script: |
          const { data: comments } = await github.rest.issues.listComments({
            owner: context.repo.owner,
            repo: context.repo.repo,
            issue_number: context.issue.number,
          });

          const botComment = comments.find(comment =>
            comment.user.type === 'Bot' &&
            comment.body.includes('## 🔍 PR Checks Summary')
          );

          const summary = `## 🔍 PR Checks Summary

          | Check | Status |
          |-------|--------|
          | Backend Tests | ${{ needs.backend-tests.result == 'success' && '✅ Passed' || '❌ Failed' }} |
          | Frontend Tests | ${{ needs.frontend-tests.result == 'success' && '✅ Passed' || '❌ Failed' }} |
          | E2E Tests | ${{ needs.e2e-tests.result == 'success' && '✅ Passed' || '❌ Failed' }} |
          | Security Scan | ${{ needs.security-scan.result == 'success' && '✅ Passed' || '❌ Failed' }} |
          | Build Verification | ${{ needs.build-verification.result == 'success' && '✅ Passed' || '❌ Failed' }} |

          ${{ needs.backend-tests.result == 'success' && needs.frontend-tests.result == 'success' && needs.e2e-tests.result == 'success' && needs.security-scan.result == 'success' && needs.build-verification.result == 'success' && '🎉 **All checks passed!** This PR is ready for code review and merge.' || '⚠️ **Some checks failed.** Please fix the issues before requesting review.' }}

          ---
          *This comment will be updated automatically as checks complete.*`;

          if (botComment) {
            await github.rest.issues.updateComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              comment_id: botComment.id,
              body: summary
            });
          } else {
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: summary
            });
          }
