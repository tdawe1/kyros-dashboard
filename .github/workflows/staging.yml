name: Deploy to Staging

on:
  push:
    branches: [develop, feature/*]
  pull_request:
    branches: [develop]

env:
  NODE_VERSION: '18'
  PYTHON_VERSION: '3.11'

jobs:
  # Deploy to staging environment
  deploy-staging:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: ui/package-lock.json

      - name: Install dependencies
        run: |
          cd frontend
          npm ci

      - name: Build frontend for staging
        run: |
          cd frontend
          npm run build
        env:
          VITE_API_BASE_URL: ${{ secrets.VITE_API_BASE_URL_STAGING }}

      - name: Deploy frontend to Vercel (Preview)
        uses: amondnet/vercel-action@v41.1.4
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
          working-directory: ./frontend
          vercel-args: '--target=preview'

      - name: Deploy backend to Railway (Staging)
        uses: railwayapp/railway-deploy@v1
        with:
          railway-token: ${{ secrets.RAILWAY_TOKEN }}
          service: ${{ secrets.RAILWAY_STAGING_SERVICE_NAME }}
          directory: ./backend

      - name: Comment PR with staging URL
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v6
        with:
          script: |
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });

            const botComment = comments.find(comment =>
              comment.user.type === 'Bot' && comment.body.includes('Staging deployment')
            );

            const stagingUrl = `https://${process.env.VERCEL_PREVIEW_URL || '${{ vars.STAGING_FRONTEND_URL }}'}`;
            const commentBody = `ðŸš€ **Staging Deployment Ready!**

            **Frontend**: ${stagingUrl}
            **Backend**: ${process.env.RAILWAY_STAGING_URL || '${{ vars.STAGING_BACKEND_URL }}'}

            This deployment will be automatically updated when you push new commits to this branch.`;

            if (botComment) {
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: commentBody
              });
            } else {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: commentBody
              });
            }
