name: Import Latest Plan from Drive
on:
  workflow_dispatch: {}   # run manually (or via gh workflow run)

permissions:
  contents: write          # commit plan & tasks
  pull-requests: write     # open draft PR

jobs:
  import:
    runs-on: ubuntu-latest
    outputs:
      branch_name: ${{ steps.stage.outputs.BRANCH_NAME }}
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Install Google client + YAML
        run: pip install google-api-python-client google-auth google-auth-httplib2 pyyaml

      - name: Download newest PlanSpec from Drive folder
        env:
          GDRIVE_SA_JSON: ${{ secrets.GDRIVE_SA_JSON }}
          PLANS_INBOX_FOLDER_ID: ${{ secrets.PLANS_INBOX_FOLDER_ID }}
        run: |
          python - <<'PY'
          import os, io, json, sys
          from google.oauth2 import service_account
          from googleapiclient.discovery import build
          from googleapiclient.http import MediaIoBaseDownload
          from scripts.retry_utils import retry_with_backoff
          
          def download_plan():
              creds = service_account.Credentials.from_service_account_info(
                  json.loads(os.environ["GDRIVE_SA_JSON"]),
                  scopes=["https://www.googleapis.com/auth/drive.readonly"]
              )
              svc = build('drive', 'v3', credentials=creds)
              folder = os.environ["PLANS_INBOX_FOLDER_ID"]
              
              # List files with retry
              resp = retry_with_backoff(
                  svc.files().list,
                  max_retries=3,
                  q=f"'{folder}' in parents and trashed=false and name contains '.yml'",
                  orderBy="modifiedTime desc",
                  pageSize=1,
                  fields="files(id,name)"
              ).execute()
              
              files = resp.get('files', [])
              if not files:
                  raise Exception("No .yml plans found in Plans Inbox.")
              
              fid, name = files[0]['id'], files[0]['name']
              
              # Download file with retry
              request = svc.files().get_media(fileId=fid)
              fh = io.BytesIO()
              downloader = MediaIoBaseDownload(fh, request)
              
              def download_chunks():
                  done = False
                  while not done:
                      status, done = downloader.next_chunk()
                  return fh.getvalue()
              
              file_data = retry_with_backoff(download_chunks, max_retries=3)
              
              with open('planspec.yml', 'wb') as f:
                  f.write(file_data)
              
              print(f"SUCCESS: Downloaded {name} ({len(file_data)} bytes)")
          
          try:
              download_plan()
          except Exception as e:
              print(f"ERROR: Failed to download plan from Google Drive: {e}")
              sys.exit(1)
          PY

      - name: Stage PlanSpec into repo
        id: stage
        run: |
          mkdir -p collaboration/plans/inbox
          cp planspec.yml collaboration/plans/inbox/
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"
          
          # Create timestamped branch name
          TIMESTAMP=$(date +%Y%m%d-%H%M%S)
          BRANCH_NAME="merge/plan-import-${TIMESTAMP}"
          
          # Create and switch to new branch
          git checkout -b "$BRANCH_NAME"
          
          # Add and commit the plan
          git add collaboration/plans/inbox/planspec.yml
          git commit -m "Import latest plan from Drive (${TIMESTAMP})"
          
          # Push the branch
          git push origin "$BRANCH_NAME"
          
          # Output branch name for next workflow
          echo "BRANCH_NAME=$BRANCH_NAME" >> $GITHUB_OUTPUT
          
          # Also save to a file for the next workflow to read
          echo "$BRANCH_NAME" > branch_name.txt

      - name: Upload branch name artifact
        uses: actions/upload-artifact@v4
        with:
          name: branch-name
          path: branch_name.txt
          retention-days: 1
