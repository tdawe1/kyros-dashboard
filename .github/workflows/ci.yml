name: CI Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  PYTHON_VERSION: '3.11'
  NODE_VERSION: '18'

jobs:
  backend-tests:
    name: Backend Tests
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./backend

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install ruff isort flake8 pytest pytest-cov bandit

    # - name: Format check with Ruff
    #   run: ruff format --check .

    # - name: Import sorting check with isort
    #   run: isort --check-only --diff .

    - name: Lint with flake8
      run: flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics

    - name: Security scan with Bandit
      run: bandit -r . -f json -o bandit-report.json || true
      continue-on-error: true

    - name: Run tests
      run: pytest --cov=. --cov-report=xml --cov-report=term-missing

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./backend/coverage.xml
        flags: backend
        name: backend-coverage

  frontend-tests:
    name: Frontend Tests
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./frontend

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: ./frontend/package-lock.json

    - name: Install dependencies
      run: npm ci

    - name: Lint with ESLint
      run: npm run lint

    - name: Format check with Prettier
      run: npm run format:check

    - name: Type check
      run: npm run type-check

    - name: Run tests
      run: npm run test:ci

    - name: Build application
      run: npm run build

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./frontend/coverage/lcov.info
        flags: frontend
        name: frontend-coverage

  e2e-tests:
    name: E2E Tests
    runs-on: ubuntu-latest
    needs: [backend-tests, frontend-tests]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: ./frontend/package-lock.json

    - name: Install dependencies
      run: npm ci
      working-directory: ./frontend

    - name: Install Playwright Browsers
      run: npx playwright install --with-deps
      working-directory: ./frontend

    - name: Start backend services
      run: |
        cd backend
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        nohup python -m uvicorn main:app --host 0.0.0.0 --port 8000 > backend.log 2>&1 &
        echo $! > backend.pid
      env:
        OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}

    - name: Start frontend
      run: |
        nohup npm run dev > frontend.log 2>&1 &
        echo $! > frontend.pid
      working-directory: ./frontend

    - name: Wait for services
      run: |
        echo "Waiting for services to start..."
        for i in {1..30}; do
          if curl -f http://localhost:8000/health >/dev/null 2>&1; then
            echo "Backend is ready!"
            break
          fi
          echo "Waiting for backend... ($i/30)"
          sleep 2
        done

        for i in {1..30}; do
          if curl -f http://localhost:5173 >/dev/null 2>&1; then
            echo "Frontend is ready!"
            break
          fi
          echo "Waiting for frontend... ($i/30)"
          sleep 2
        done

        # Final health checks
        curl -f http://localhost:8000/health || (echo "Backend health check failed" && cat backend.log && exit 1)
        curl -f http://localhost:5173 || (echo "Frontend health check failed" && cat frontend.log && exit 1)

    - name: Run E2E tests
      run: npm run test:e2e
      working-directory: ./frontend

    - name: Cleanup services
      if: always()
      run: |
        echo "Cleaning up services..."
        if [ -f backend.pid ]; then
          kill $(cat backend.pid) 2>/dev/null || true
          rm -f backend.pid
        fi
        if [ -f frontend.pid ]; then
          kill $(cat frontend.pid) 2>/dev/null || true
          rm -f frontend.pid
        fi
        # Show logs for debugging
        if [ -f backend.log ]; then
          echo "=== Backend Logs ==="
          cat backend.log
        fi
        if [ -f frontend.log ]; then
          echo "=== Frontend Logs ==="
          cat frontend.log
        fi

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./backend

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install bandit safety

    - name: Run Bandit security scan
      run: bandit -r . -f json -o bandit-report.json
      continue-on-error: true

    - name: Run Safety check
      run: safety check --json --output safety-report.json
      continue-on-error: true

    - name: Upload security reports
      uses: actions/upload-artifact@v4
      with:
        name: security-reports
        path: |
          ./backend/bandit-report.json
          ./backend/safety-report.json

  build-verification:
    name: Build Verification
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: ./frontend/package-lock.json

    - name: Build backend
      run: |
        cd backend
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        python -c "import main; print('Backend imports successfully')"

    - name: Build frontend
      run: |
        cd frontend
        npm ci
        npm run build

    - name: Verify Docker builds
      run: |
        docker build -f backend/Dockerfile.test -t kyros-backend-test ./backend
        docker build -f frontend/Dockerfile.test -t kyros-frontend-test ./frontend

  pr-checks-summary:
    name: PR Checks Summary
    runs-on: ubuntu-latest
    needs: [backend-tests, frontend-tests, e2e-tests, security-scan, build-verification]
    if: always()

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Generate PR summary
      run: |
        echo "## 🎯 PR Checks Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "| Check | Status |" >> $GITHUB_STEP_SUMMARY
        echo "|-------|--------|" >> $GITHUB_STEP_SUMMARY
        echo "| Backend Tests | ${{ needs.backend-tests.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Frontend Tests | ${{ needs.frontend-tests.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
        echo "| E2E Tests | ${{ needs.e2e-tests.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Security Scan | ${{ needs.security-scan.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Build Verification | ${{ needs.build-verification.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY

        if [[ "${{ needs.backend-tests.result }}" != "success" || "${{ needs.frontend-tests.result }}" != "success" || "${{ needs.e2e-tests.result }}" != "success" || "${{ needs.security-scan.result }}" != "success" || "${{ needs.build-verification.result }}" != "success" ]]; then
          echo "❌ Some checks failed. Please review the logs above." >> $GITHUB_STEP_SUMMARY
          exit 1
        else
          echo "✅ All checks passed! Ready for review." >> $GITHUB_STEP_SUMMARY
        fi
