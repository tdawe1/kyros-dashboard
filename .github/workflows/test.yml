name: Tests

on:
  push:
    branches: [ main, develop, feature/* ]
  pull_request:
    branches: [ main, develop ]

jobs:
  backend-tests:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.11, 3.12]

    services:
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Cache Poetry dependencies
      uses: actions/cache@v3
      with:
        path: |
          ~/.cache/pypoetry
        key: ${{ runner.os }}-poetry-${{ hashFiles('backend/poetry.lock') }}
        restore-keys: |
          ${{ runner.os }}-poetry-

    - name: Install Poetry and backend deps
      working-directory: ./backend
      run: |
        python -m pip install --upgrade pip
        pip install poetry
        poetry install --no-interaction --no-ansi

    - name: Lint with ruff
      working-directory: ./backend
      run: |
        poetry run ruff check . --output-format=github

    # - name: Format check with ruff
    #   working-directory: ./backend
    #   run: |
    #     ruff format --check .

    - name: Security check with bandit
      working-directory: ./backend
      run: |
        poetry run bandit -r . -f json -o bandit-report.json || true

    - name: Run unit tests with pytest
      working-directory: ./backend
      env:
        REDIS_URL: redis://localhost:6379
        API_MODE: demo
        DEFAULT_MODEL: gpt-4o-mini
        MAX_INPUT_CHARACTERS: 100000
        MAX_TOKENS_PER_JOB: 50000
        DAILY_JOB_LIMIT: 10
      run: |
        poetry run pytest --cov=. --cov-report=xml --cov-report=html --junitxml=pytest-report.xml -v

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./backend/coverage.xml
        flags: backend
        name: backend-coverage
        fail_ci_if_error: false

    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: backend-test-results-${{ matrix.python-version }}
        path: |
          backend/pytest-report.xml
          backend/htmlcov/
          backend/bandit-report.json

  frontend-tests:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json

    - name: Install dependencies
      working-directory: ./frontend
      run: npm ci

    - name: Lint with ESLint
      working-directory: ./frontend
      run: npm run lint

    - name: Format check with Prettier
      working-directory: ./frontend
      run: npm run format:check

    - name: Run unit tests with Vitest
      working-directory: ./frontend
      run: npm run test:run -- --coverage

    - name: Upload frontend test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: frontend-test-results
        path: |
          frontend/coverage/
          frontend/test-results/
        allow-no-files-found: true

  e2e-tests:
    runs-on: ubuntu-latest
    needs: [backend-tests, frontend-tests]

    services:
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json

    - name: Install Poetry and backend deps
      working-directory: ./backend
      run: |
        python -m pip install --upgrade pip
        pip install poetry
        poetry install --no-interaction --no-ansi
        poetry run pip install ruff black bandit isort flake8

    - name: Install Node.js dependencies
      working-directory: ./frontend
      run: npm ci

    - name: Install Playwright browsers
      working-directory: ./frontend
      run: npx playwright install --with-deps

    - name: Start backend server
      working-directory: ./backend
      env:
        REDIS_URL: redis://localhost:6379
        API_MODE: demo
        DEFAULT_MODEL: gpt-4o-mini
        MAX_INPUT_CHARACTERS: 100000
        MAX_TOKENS_PER_JOB: 50000
        DAILY_JOB_LIMIT: 10
      run: |
        poetry run uvicorn main:app --host 0.0.0.0 --port 8000 &
        sleep 10

    - name: Build frontend
      working-directory: ./frontend
      run: npm run build

    - name: Start frontend server
      working-directory: ./frontend
      run: |
        npm run preview -- --port 3001 --host 0.0.0.0 &
        sleep 5

    - name: Run Playwright tests
      working-directory: ./frontend
      env:
        PLAYWRIGHT_BASE_URL: http://localhost:3001
      run: npx playwright test

    - name: Upload Playwright report
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: playwright-report
        path: frontend/playwright-report/
        retention-days: 30

    - name: Upload Playwright test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: playwright-test-results
        path: frontend/test-results/
        retention-days: 30

  security-scan:
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install Poetry and dependencies
      working-directory: ./backend
      run: |
        python -m pip install --upgrade pip
        pip install poetry
        poetry install --no-interaction --no-ansi
        poetry run pip install bandit

    - name: Run security scan with bandit
      working-directory: ./backend
      run: |
        poetry run bandit -r . -f json -o bandit-report.json

    - name: Upload security report
      uses: actions/upload-artifact@v4
      with:
        name: security-report
        path: backend/bandit-report.json

  test-summary:
    runs-on: ubuntu-latest
    needs: [backend-tests, frontend-tests, e2e-tests]
    if: always()

    steps:
    - name: Check test results
      run: |
        echo "Backend tests: ${{ needs.backend-tests.result }}"
        echo "Frontend tests: ${{ needs.frontend-tests.result }}"
        echo "E2E tests: ${{ needs.e2e-tests.result }}"

        if [[ "${{ needs.backend-tests.result }}" != "success" ||
              "${{ needs.frontend-tests.result }}" != "success" ||
              "${{ needs.e2e-tests.result }}" != "success" ]]; then
          echo "Some tests failed!"
          exit 1
        else
          echo "All tests passed!"
        fi
