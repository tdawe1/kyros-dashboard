name: Tests

on:
  workflow_dispatch:
  push:
    branches: [ main, develop ]
    paths-ignore:
      - '**/*.md'
      - 'docs/**'
      - 'collaboration/logs/**'
      - 'CHANGELOG.md'
  pull_request:
    branches: [ main, develop ]
    paths-ignore:
      - '**/*.md'
      - 'docs/**'
      - 'collaboration/logs/**'
      - 'CHANGELOG.md'

concurrency:
  group: tests-${{ github.ref }}
  cancel-in-progress: true

jobs:
  changes:
    runs-on: ubuntu-latest
    outputs:
      frontend: ${{ steps.filter.outputs.frontend }}
      backend: ${{ steps.filter.outputs.backend }}
    steps:
      - uses: actions/checkout@v4
      - name: Detect changed paths
        id: filter
        uses: dorny/paths-filter@v3
        with:
          filters: |
            frontend:
              - 'frontend/**'
              - '.github/workflows/test.yml'
            backend:
              - 'backend/**'
              - '.github/workflows/test.yml'
  backend-tests:
    needs: [changes]
    if: needs.changes.outputs.backend == 'true'
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.12, 3.13]

    services:
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Cache Poetry dependencies
      uses: actions/cache@v4
      with:
        path: |
          ~/.cache/pypoetry
        key: ${{ runner.os }}-poetry-${{ hashFiles('backend/poetry.lock') }}
        restore-keys: |
          ${{ runner.os }}-poetry-

    - name: Install Poetry and backend deps
      working-directory: ./backend
      run: |
        set -e
        python -m pip install --upgrade pip

        # Retry poetry installation with proper error handling
        success=false
        for attempt in {1..3}; do
          echo "Attempt $attempt to install poetry..."
          if pip install poetry; then
            success=true
            break
          else
            echo "Poetry installation failed on attempt $attempt"
            if [ $attempt -lt 3 ]; then
              echo "Retrying in 5 seconds..."
              sleep 5
            fi
          fi
        done

        if [ "$success" != "true" ]; then
          echo "All poetry installation attempts failed"
          exit 1
        fi

        # Retry poetry install with proper error handling
        success=false
        for attempt in {1..3}; do
          echo "Attempt $attempt to install backend dependencies..."
          if poetry install --no-interaction --no-ansi --no-root; then
            success=true
            break
          else
            echo "Poetry install failed on attempt $attempt"
            if [ $attempt -lt 3 ]; then
              echo "Retrying in 10 seconds..."
              sleep 10
            fi
          fi
        done

        if [ "$success" != "true" ]; then
          echo "All poetry install attempts failed"
          exit 1
        fi

    - name: Lint with ruff
      working-directory: ./backend
      run: |
        set -Eeuo pipefail
        poetry run ruff check . --output-format=github

    - name: Show environment info (debug)
      working-directory: ./backend
      run: |
        set -Eeuo pipefail
        echo "Python (system):"; python -V || true
        which python || true
        echo "Pip:"; pip -V || true
        poetry --version || true
        poetry env info || true
        echo "Python (poetry):"; poetry run python -V || true
        poetry run which python || true
        poetry show --tree || true

    # - name: Format check with ruff
    #   working-directory: ./backend
    #   run: |
    #     ruff format --check .

    - name: Security check with bandit
      working-directory: ./backend
      run: |
        set -Eeuo pipefail
        poetry run bandit -r . -f json -o bandit-report.json

    - name: Run unit tests with pytest
      working-directory: ./backend
      env:
        ENVIRONMENT: testing
        REDIS_URL: redis://localhost:6379
        API_MODE: demo
        DEFAULT_MODEL: gpt-4o-mini
        MAX_INPUT_CHARACTERS: 100000
        MAX_TOKENS_PER_JOB: 50000
        DAILY_JOB_LIMIT: 10
        OPENAI_API_KEY: test-sk
      run: |
        set -Eeuo pipefail
        PYTHONPATH=. poetry run pytest --cov=. --cov-report=xml --cov-report=html --junitxml=pytest-report.xml -v

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./backend/coverage.xml
        flags: backend
        name: backend-coverage
        fail_ci_if_error: false

    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: backend-test-results-${{ matrix.python-version }}
        path: |
          backend/pytest-report.xml
          backend/htmlcov/
          backend/bandit-report.json

  frontend-tests:
    needs: [changes]
    if: needs.changes.outputs.frontend == 'true'
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json

    - name: Cache node_modules
      uses: actions/cache@v4
      with:
        path: frontend/node_modules
        key: ${{ runner.os }}-node-${{ hashFiles('frontend/package-lock.json') }}
        restore-keys: |
          ${{ runner.os }}-node-

    - name: Install dependencies
      working-directory: ./frontend
      run: npm ci

    - name: Lint with ESLint
      working-directory: ./frontend
      run: npm run lint

    - name: Format check with Prettier
      working-directory: ./frontend
      run: npm run format:check
      continue-on-error: true

    - name: Build UI
      working-directory: ./frontend
      run: npm run build

    - name: Run unit tests with Vitest
      working-directory: ./frontend
      run: npm run test:ci

    - name: Upload frontend test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: frontend-test-results
        path: |
          frontend/coverage/
          frontend/test-results/

  e2e-tests:
    needs: [changes, frontend-tests, backend-tests]
    if: ${{ github.event_name == 'push' && github.ref == 'refs/heads/develop' || needs.changes.outputs.frontend == 'true' || needs.changes.outputs.backend == 'true' }}
    runs-on: ubuntu-latest

    services:
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json

    - name: Install Poetry and backend deps
      working-directory: ./backend
      run: |
        set -e
        python -m pip install --upgrade pip

        # Retry poetry installation with proper error handling
        success=false
        for attempt in {1..3}; do
          echo "Attempt $attempt to install poetry..."
          if pip install poetry; then
            success=true
            break
          else
            echo "Poetry installation failed on attempt $attempt"
            if [ $attempt -lt 3 ]; then
              echo "Retrying in 5 seconds..."
              sleep 5
            fi
          fi
        done

        if [ "$success" != "true" ]; then
          echo "All poetry installation attempts failed"
          exit 1
        fi

        # Retry poetry install with proper error handling
        success=false
        for attempt in {1..3}; do
          echo "Attempt $attempt to install backend dependencies..."
          if poetry install --no-interaction --no-ansi --no-root; then
            success=true
            break
          else
            echo "Poetry install failed on attempt $attempt"
            if [ $attempt -lt 3 ]; then
              echo "Retrying in 10 seconds..."
              sleep 10
            fi
          fi
        done

        if [ "$success" != "true" ]; then
          echo "All poetry install attempts failed"
          exit 1
        fi

        poetry run pip install ruff black bandit isort flake8

    - name: Install Node.js dependencies
      working-directory: ./frontend
      run: npm ci

    - name: Install Playwright browsers
      working-directory: ./frontend
      run: npx playwright install --with-deps

    - name: Start backend server
      working-directory: ./backend
      env:
        ENVIRONMENT: testing
        REDIS_URL: redis://localhost:6379
        API_MODE: demo
        DEFAULT_MODEL: gpt-4o-mini
        MAX_INPUT_CHARACTERS: 100000
        MAX_TOKENS_PER_JOB: 50000
        DAILY_JOB_LIMIT: 10
      run: |
        set -Eeuo pipefail
        poetry run uvicorn main:app --host 0.0.0.0 --port 8000 &
        sleep 10

    - name: Build frontend
      working-directory: ./frontend
      run: npm run build

    - name: Start frontend server
      working-directory: ./frontend
      run: |
        set -Eeuo pipefail
        npm run preview -- --port 3001 --host 0.0.0.0 &
        sleep 5

    - name: Run Playwright tests
      working-directory: ./frontend
      env:
        PLAYWRIGHT_BASE_URL: http://localhost:3001
      run: npx playwright test

    - name: Upload Playwright report
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: playwright-report
        path: frontend/playwright-report/
        retention-days: 30

    - name: Upload Playwright test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: playwright-test-results
        path: frontend/test-results/
        retention-days: 30

  build-verification:
    needs: [changes, frontend-tests]
    if: needs.changes.outputs.backend == 'true'
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'

    - name: Install Node.js dependencies
      working-directory: ./frontend
      run: npm ci

    - name: Install Poetry and backend deps
      working-directory: ./backend
      run: |
        set -e
        python -m pip install --upgrade pip

        # Retry poetry installation with proper error handling
        success=false
        for attempt in {1..3}; do
          echo "Attempt $attempt to install poetry..."
          if pip install poetry; then
            success=true
            break
          else
            echo "Poetry installation failed on attempt $attempt"
            if [ $attempt -lt 3 ]; then
              echo "Retrying in 5 seconds..."
              sleep 5
            fi
          fi
        done

        if [ "$success" != "true" ]; then
          echo "All poetry installation attempts failed"
          exit 1
        fi

        # Retry poetry install with proper error handling
        success=false
        for attempt in {1..3}; do
          echo "Attempt $attempt to install backend dependencies..."
          if poetry install --no-interaction --no-ansi; then
            success=true
            break
          else
            echo "Poetry install failed on attempt $attempt"
            if [ $attempt -lt 3 ]; then
              echo "Retrying in 10 seconds..."
              sleep 10
            fi
          fi
        done

        if [ "$success" != "true" ]; then
          echo "All poetry install attempts failed"
          exit 1
        fi

    - name: Build frontend
      working-directory: ./frontend
      run: npm run build

    - name: Verify backend imports
      working-directory: ./backend
      run: |
        set -Eeuo pipefail
        poetry run python -c "import main; print('Backend imports successfully')"

  security-scan:
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'

    - name: Install Poetry and dependencies
      working-directory: ./backend
      run: |
        set -Eeuo pipefail
        python -m pip install --upgrade pip
        pip install poetry
        poetry install --no-interaction --no-ansi --no-root
        poetry run pip install bandit

    - name: Run security scan with bandit
      working-directory: ./backend
      run: |
        set -Eeuo pipefail
        poetry run bandit -r . -f json -o bandit-report.json

    - name: Upload security report
      uses: actions/upload-artifact@v4
      with:
        name: security-report
        path: backend/bandit-report.json

  pr-checks-summary:
    runs-on: ubuntu-latest
    needs: [backend-tests, frontend-tests, e2e-tests, build-verification, security-scan]
    if: always()

    steps:
    - name: Check test results
      run: |
        set -e
        echo "## CI Performance Summary" >> $GITHUB_STEP_SUMMARY
        echo "| Job | Status |" >> $GITHUB_STEP_SUMMARY
        echo "|-----|--------|" >> $GITHUB_STEP_SUMMARY
        echo "| Backend Tests | ${{ needs.backend-tests.result }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Frontend Tests | ${{ needs.frontend-tests.result }} |" >> $GITHUB_STEP_SUMMARY
        echo "| E2E Tests | ${{ needs.e2e-tests.result }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Build Verification | ${{ needs.build-verification.result }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Security Scan | ${{ needs.security-scan.result }} |" >> $GITHUB_STEP_SUMMARY

        bt="${{ needs.backend-tests.result }}"
        ft="${{ needs.frontend-tests.result }}"
        e2e="${{ needs.e2e-tests.result }}"
        bv="${{ needs.build-verification.result }}"
        sec="${{ needs.security-scan.result }}"

        echo "Backend tests: $bt"
        echo "Frontend tests: $ft"
        echo "E2E tests: $e2e"
        echo "Build verification: $bv"
        echo "Security scan: $sec"

        ok() { [ "$1" = "success" ] || [ "$1" = "skipped" ]; }

        if ok "$bt" && ok "$ft" && ok "$e2e" && ok "$bv" && ok "$sec"; then
          echo "All checks passed (treating skipped as OK)"
        else
          echo "Some checks failed"; exit 1
        fi
# Trigger new CI run
