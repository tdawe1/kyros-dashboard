name: Quality Checks

on:
  pull_request:
    branches: [main, develop]
    paths-ignore:
      - '**/*.md'
      - 'collaboration/logs/**'
      - 'CHANGELOG.md'
  push:
    branches: [main, develop]
    paths-ignore:
      - '**/*.md'
      - 'collaboration/logs/**'
      - 'CHANGELOG.md'

env:
  NODE_VERSION: '20'
  PYTHON_VERSION: '3.12'

jobs:
  # Security and code quality checks
  security:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Full history for secrets detection

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Install Poetry and backend deps
        run: |
          python -m pip install --upgrade pip
          pip install poetry detect-secrets
          cd backend
          poetry install --no-interaction --no-ansi --no-root

      - name: Install Node.js dependencies
        run: |
          cd frontend
          npm ci

      - name: Run security scan (Python)
        run: |
          cd backend
          poetry run bandit -r . -f json -o bandit-report.json || true
          poetry run bandit -r . -f txt

      - name: Run security scan (Node.js)
        run: |
          cd frontend
          npm audit --json > npm-audit-report.json || true

      - name: Check for secrets
        run: |
          detect-secrets scan --baseline .secrets.baseline

      - name: Upload security reports
        uses: actions/upload-artifact@v4
        with:
          name: security-reports
          path: |
            backend/bandit-report.json
            frontend/npm-audit-report.json

  # Code formatting and linting
  linting:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Install Poetry and backend deps
        run: |
          python -m pip install --upgrade pip
          pip install poetry
          cd backend
          poetry install --no-interaction --no-ansi --no-root

      - name: Install Node.js dependencies
        run: |
          cd frontend
          npm ci

      - name: Check Python formatting
        run: |
          cd backend
          # poetry run ruff format --check .
          poetry run ruff check .
        continue-on-error: true

      - name: Check frontend formatting
        run: |
          cd frontend
          npm run lint
          npm run format:check
        continue-on-error: true

      # - name: Check commit message format
      #   uses: commitlint/action@v1
      #   with:
      #     configFile: .commitlintrc.js

  # Removed build/performance duplication; Tests workflow handles builds
