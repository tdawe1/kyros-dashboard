name: Collab Guard
on: [pull_request]
jobs:
  guard:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Need full history for diff calculation
      
      # Enforce develop as PR base branch
      - name: Check PR base branch
        run: |
          if [ "${{ github.base_ref }}" != "develop" ]; then
            echo "❌ PRs must target 'develop' branch, not '${{ github.base_ref }}'"
            echo "Please update your PR to target the 'develop' branch."
            exit 1
          else
            echo "✅ PR correctly targets 'develop' branch"
          fi
      
      # Size guard - check for large PRs
      - name: Check PR size
        id: pr_size
        run: |
          # Get the diff stats
          DIFF_STATS=$(git diff --stat ${{ github.base_ref }}...HEAD)
          TOTAL_LINES=$(echo "$DIFF_STATS" | tail -1 | grep -o '[0-9]*' | head -1)
          
          echo "PR diff stats:"
          echo "$DIFF_STATS"
          echo "Total lines changed: $TOTAL_LINES"
          
          if [ "$TOTAL_LINES" -gt 1000 ]; then
            echo "❌ PR is too large: $TOTAL_LINES lines changed (limit: 1000)"
            echo "Please split this PR into smaller, more manageable chunks."
            echo "Consider breaking down by feature or logical component."
            echo "total_lines=$TOTAL_LINES" >> $GITHUB_OUTPUT
            echo "is_large=true" >> $GITHUB_OUTPUT
            exit 1
          else
            echo "✅ PR size is acceptable: $TOTAL_LINES lines changed"
            echo "total_lines=$TOTAL_LINES" >> $GITHUB_OUTPUT
            echo "is_large=false" >> $GITHUB_OUTPUT
          fi
      
      # Add needs-split label for large PRs (if they somehow pass the check)
      - name: Add needs-split label for large PRs
        if: steps.pr_size.outputs.is_large == 'true'
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.issues.addLabels({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              labels: ['needs-split']
            })
      
      - name: No conflict markers
        run: |
          ! grep -R --line-number -E '^(<<<<<<<|=======|>>>>>>>)' . --exclude-dir=venv --exclude-dir=.venv --exclude-dir=node_modules || \
            (echo "Conflict markers found"; exit 1)
      - name: Validate JSON
        run: |
          python - <<'PY'
import json, sys, pathlib
ok=True
# Skip files that are not actually JSON or have special formats
skip_files = {'tsconfig.json', 'tsconfig.node.json', 'package-lock.json'}
for p in pathlib.Path('.').rglob('*.json'):
    if 'venv' in str(p) or 'node_modules' in str(p) or p.name in skip_files:
        continue
    try: 
        json.loads(p.read_text())
        print(f'✓ Valid JSON: {p}')
    except Exception as e:
        print(f'✗ Invalid JSON: {p}: {e}'); ok=False
sys.exit(0 if ok else 1)
PY
      - name: Validate YAML (plans)
        run: |
          python - <<'PY'
import sys, pathlib, yaml
ok=True
for p in pathlib.Path('collaboration/plans').rglob('*.yml'):
    try: yaml.safe_load(p.read_text())
    except Exception as e:
        print(f'Invalid YAML: {p}: {e}'); ok=False
sys.exit(0 if ok else 1)
PY