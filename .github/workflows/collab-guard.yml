name: Collab Guard
on: [pull_request]
jobs:
  guard:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0  # need full history for branch comparisons

      # Enforce develop as PR base branch
      - name: Check PR base branch
        run: |
          # Allow release sync PRs: develop -> main
          if [ "${{ github.base_ref }}" = "main" ] && [ "${{ github.head_ref }}" = "develop" ]; then
            echo "✅ Release sync PR from 'develop' to 'main' allowed"
            exit 0
          fi
          if [ "${{ github.base_ref }}" != "develop" ]; then
            echo "❌ PRs must target 'develop' branch, not '${{ github.base_ref }}'"
            echo "If this is a release, open PR from 'develop' to 'main' only."
            exit 1
          else
            echo "✅ PR correctly targets 'develop' branch"
          fi

      # Ensure PR branch is up-to-date with base (develop)
      - name: Check branch is up-to-date with base
        run: |
          git fetch origin "${{ github.base_ref }}:${{ github.base_ref }}"
          BEHIND=$(git rev-list --left-right --count "${{ github.base_ref }}...${{ github.sha }}" | awk '{print $1}')
          echo "Commits behind base '${{ github.base_ref }}': ${BEHIND:-0}"
          if [ "${BEHIND:-0}" -gt 0 ]; then
            echo "❌ Branch is behind '${{ github.base_ref }}' by ${BEHIND} commits."
            echo "Please click 'Update branch' (preferred) or rebase onto '${{ github.base_ref }}'."
            exit 1
          else
            echo "✅ Branch is up-to-date with base"
          fi
      - name: No conflict markers
        run: |
          ! grep -R --line-number -E '^(<<<<<<<|=======|>>>>>>>)' . --exclude-dir=venv --exclude-dir=.venv --exclude-dir=node_modules || \
            (echo "Conflict markers found"; exit 1)
      - name: Validate JSON
        run: |
          python - <<'PY'
import json, sys, pathlib
ok=True
# Skip files that are not actually JSON or have special formats
skip_files = {'tsconfig.json', 'tsconfig.node.json', 'package-lock.json'}
for p in pathlib.Path('.').rglob('*.json'):
    if 'venv' in str(p) or 'node_modules' in str(p) or p.name in skip_files:
        continue
    try:
        json.loads(p.read_text())
        print(f'✓ Valid JSON: {p}')
    except Exception as e:
        print(f'✗ Invalid JSON: {p}: {e}'); ok=False
sys.exit(0 if ok else 1)
PY
      - name: Validate YAML (plans)
        run: |
          python - <<'PY'
import sys, pathlib, yaml
ok=True
for p in pathlib.Path('collaboration/plans').rglob('*.yml'):
    try: yaml.safe_load(p.read_text())
    except Exception as e:
        print(f'Invalid YAML: {p}: {e}'); ok=False
sys.exit(0 if ok else 1)
PY
